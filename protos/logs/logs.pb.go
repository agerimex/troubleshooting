// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: logs.proto

package logs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LogMessageRequest) Reset() {
	*x = LogMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageRequest) ProtoMessage() {}

func (x *LogMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageRequest.ProtoReflect.Descriptor instead.
func (*LogMessageRequest) Descriptor() ([]byte, []int) {
	return file_logs_proto_rawDescGZIP(), []int{0}
}

func (x *LogMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogMessageRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type LogMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LogMessageResponse) Reset() {
	*x = LogMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageResponse) ProtoMessage() {}

func (x *LogMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageResponse.ProtoReflect.Descriptor instead.
func (*LogMessageResponse) Descriptor() ([]byte, []int) {
	return file_logs_proto_rawDescGZIP(), []int{1}
}

func (x *LogMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_logs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_logs_proto_rawDescGZIP(), []int{2}
}

func (x *Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type OneSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp          *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TraceId            string                   `protobuf:"bytes,2,opt,name=TraceId,proto3" json:"TraceId,omitempty"`
	SpanId             string                   `protobuf:"bytes,3,opt,name=SpanId,proto3" json:"SpanId,omitempty"`
	ParentSpanId       string                   `protobuf:"bytes,4,opt,name=ParentSpanId,proto3" json:"ParentSpanId,omitempty"`
	TraceState         string                   `protobuf:"bytes,5,opt,name=TraceState,proto3" json:"TraceState,omitempty"`
	SpanName           string                   `protobuf:"bytes,6,opt,name=SpanName,proto3" json:"SpanName,omitempty"`
	SpanKind           string                   `protobuf:"bytes,7,opt,name=SpanKind,proto3" json:"SpanKind,omitempty"`
	ServiceName        string                   `protobuf:"bytes,8,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	ResourceAttributes map[string]string        `protobuf:"bytes,9,rep,name=ResourceAttributes,proto3" json:"ResourceAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SpanAttributes     map[string]string        `protobuf:"bytes,10,rep,name=SpanAttributes,proto3" json:"SpanAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Duration           int64                    `protobuf:"varint,11,opt,name=Duration,proto3" json:"Duration,omitempty"`
	StatusCode         int32                    `protobuf:"varint,12,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	StatusMessage      string                   `protobuf:"bytes,13,opt,name=StatusMessage,proto3" json:"StatusMessage,omitempty"`
	Events_Timestamp   []*timestamppb.Timestamp `protobuf:"bytes,14,rep,name=Events_Timestamp,json=EventsTimestamp,proto3" json:"Events_Timestamp,omitempty"`
	Events_Name        []string                 `protobuf:"bytes,15,rep,name=Events_Name,json=EventsName,proto3" json:"Events_Name,omitempty"`
	Events_Attributes  []*Attribute             `protobuf:"bytes,16,rep,name=Events_Attributes,json=EventsAttributes,proto3" json:"Events_Attributes,omitempty"`
	Links_TraceId      []string                 `protobuf:"bytes,17,rep,name=Links_TraceId,json=LinksTraceId,proto3" json:"Links_TraceId,omitempty"`
	Links_SpanId       []string                 `protobuf:"bytes,18,rep,name=Links_SpanId,json=LinksSpanId,proto3" json:"Links_SpanId,omitempty"`
	Links_TraceState   []string                 `protobuf:"bytes,19,rep,name=Links_TraceState,json=LinksTraceState,proto3" json:"Links_TraceState,omitempty"`
	Links_Attributes   []*Attribute             `protobuf:"bytes,20,rep,name=Links_Attributes,json=LinksAttributes,proto3" json:"Links_Attributes,omitempty"`
	ChildSpanCount     int32                    `protobuf:"varint,21,opt,name=ChildSpanCount,proto3" json:"ChildSpanCount,omitempty"`
}

func (x *OneSpan) Reset() {
	*x = OneSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneSpan) ProtoMessage() {}

func (x *OneSpan) ProtoReflect() protoreflect.Message {
	mi := &file_logs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneSpan.ProtoReflect.Descriptor instead.
func (*OneSpan) Descriptor() ([]byte, []int) {
	return file_logs_proto_rawDescGZIP(), []int{3}
}

func (x *OneSpan) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OneSpan) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *OneSpan) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *OneSpan) GetParentSpanId() string {
	if x != nil {
		return x.ParentSpanId
	}
	return ""
}

func (x *OneSpan) GetTraceState() string {
	if x != nil {
		return x.TraceState
	}
	return ""
}

func (x *OneSpan) GetSpanName() string {
	if x != nil {
		return x.SpanName
	}
	return ""
}

func (x *OneSpan) GetSpanKind() string {
	if x != nil {
		return x.SpanKind
	}
	return ""
}

func (x *OneSpan) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *OneSpan) GetResourceAttributes() map[string]string {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *OneSpan) GetSpanAttributes() map[string]string {
	if x != nil {
		return x.SpanAttributes
	}
	return nil
}

func (x *OneSpan) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *OneSpan) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *OneSpan) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *OneSpan) GetEvents_Timestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.Events_Timestamp
	}
	return nil
}

func (x *OneSpan) GetEvents_Name() []string {
	if x != nil {
		return x.Events_Name
	}
	return nil
}

func (x *OneSpan) GetEvents_Attributes() []*Attribute {
	if x != nil {
		return x.Events_Attributes
	}
	return nil
}

func (x *OneSpan) GetLinks_TraceId() []string {
	if x != nil {
		return x.Links_TraceId
	}
	return nil
}

func (x *OneSpan) GetLinks_SpanId() []string {
	if x != nil {
		return x.Links_SpanId
	}
	return nil
}

func (x *OneSpan) GetLinks_TraceState() []string {
	if x != nil {
		return x.Links_TraceState
	}
	return nil
}

func (x *OneSpan) GetLinks_Attributes() []*Attribute {
	if x != nil {
		return x.Links_Attributes
	}
	return nil
}

func (x *OneSpan) GetChildSpanCount() int32 {
	if x != nil {
		return x.ChildSpanCount
	}
	return 0
}

type Spans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*OneSpan `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *Spans) Reset() {
	*x = Spans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spans) ProtoMessage() {}

func (x *Spans) ProtoReflect() protoreflect.Message {
	mi := &file_logs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spans.ProtoReflect.Descriptor instead.
func (*Spans) Descriptor() ([]byte, []int) {
	return file_logs_proto_rawDescGZIP(), []int{4}
}

func (x *Spans) GetSpans() []*OneSpan {
	if x != nil {
		return x.Spans
	}
	return nil
}

var File_logs_proto protoreflect.FileDescriptor

var file_logs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x12,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x09,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9e, 0x08, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x70, 0x61,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x70, 0x61,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x70,
	0x61, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x0e, 0x53, 0x70, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4f, 0x6e,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x53, 0x70, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f,
	0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53,
	0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x53, 0x70, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2c, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x32, 0x81, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x0b, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logs_proto_rawDescOnce sync.Once
	file_logs_proto_rawDescData = file_logs_proto_rawDesc
)

func file_logs_proto_rawDescGZIP() []byte {
	file_logs_proto_rawDescOnce.Do(func() {
		file_logs_proto_rawDescData = protoimpl.X.CompressGZIP(file_logs_proto_rawDescData)
	})
	return file_logs_proto_rawDescData
}

var file_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_logs_proto_goTypes = []interface{}{
	(*LogMessageRequest)(nil),     // 0: logs.LogMessageRequest
	(*LogMessageResponse)(nil),    // 1: logs.LogMessageResponse
	(*Attribute)(nil),             // 2: logs.Attribute
	(*OneSpan)(nil),               // 3: logs.OneSpan
	(*Spans)(nil),                 // 4: logs.Spans
	nil,                           // 5: logs.OneSpan.ResourceAttributesEntry
	nil,                           // 6: logs.OneSpan.SpanAttributesEntry
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_logs_proto_depIdxs = []int32{
	7,  // 0: logs.LogMessageRequest.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 1: logs.OneSpan.Timestamp:type_name -> google.protobuf.Timestamp
	5,  // 2: logs.OneSpan.ResourceAttributes:type_name -> logs.OneSpan.ResourceAttributesEntry
	6,  // 3: logs.OneSpan.SpanAttributes:type_name -> logs.OneSpan.SpanAttributesEntry
	7,  // 4: logs.OneSpan.Events_Timestamp:type_name -> google.protobuf.Timestamp
	2,  // 5: logs.OneSpan.Events_Attributes:type_name -> logs.Attribute
	2,  // 6: logs.OneSpan.Links_Attributes:type_name -> logs.Attribute
	3,  // 7: logs.Spans.spans:type_name -> logs.OneSpan
	0,  // 8: logs.LogService.LogMessage:input_type -> logs.LogMessageRequest
	4,  // 9: logs.LogService.SendSpans:input_type -> logs.Spans
	1,  // 10: logs.LogService.LogMessage:output_type -> logs.LogMessageResponse
	1,  // 11: logs.LogService.SendSpans:output_type -> logs.LogMessageResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_logs_proto_init() }
func file_logs_proto_init() {
	if File_logs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logs_proto_goTypes,
		DependencyIndexes: file_logs_proto_depIdxs,
		MessageInfos:      file_logs_proto_msgTypes,
	}.Build()
	File_logs_proto = out.File
	file_logs_proto_rawDesc = nil
	file_logs_proto_goTypes = nil
	file_logs_proto_depIdxs = nil
}
